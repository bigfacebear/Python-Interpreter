function preBuiltin(){
    var code = "";
    code += "class list(object):\n";
    code += "    def __init__(self, list):\n";
    code += "        self.__arr = list\n";
    code += "    def get(self, index):\n";
    code += "        return self.__arr[index]\n";
    code += "    def append(self, v):\n";
    code += "        self.__arr[self.__arr.length] = v\n";
    code += "    def pop(self):\n";
    code += "        ret = self.__arr[self.__arr.length - 1]\n";
    code += "        self.__arr = self.__arr[0:self.__arr.length-1]\n";
    code += "        return ret\n";
    code += "    def getLength(self):\n";
    code += "        return self.__arr.length\n";
    code += "    def map(self, f):\n";
    code += "        arr = self.__arr\n";
    code += "        i = 0\n";
    code += "        while i < arr.length:\n";
    code += "            arr[i] = f(arr[i])\n";
    code += "            i += 1\n";
    code += "        return arr\n";
    code += "    def reduce(self, f):\n";
    code += "        arr = self.__arr\n";
    code += "        i = 1\n";
    code += "        ret = arr[0]\n";
    code += "        while i < arr.length:\n";
    code += "            ret = f(ret, arr[i])\n";
    code += "            i += 1\n";
    code += "        return ret\n";
    code += "    def toArray(self):\n";
    code += "        return self.__arr\n";
    parser(code);
    code = "";
    parser(code);
    code = "";
    code += "def range(beg, end):\n";
    code += "    cnt = 0\n";
    code += "    ret = []\n";
    code += "    num = beg\n";
    code += "    while num < end:\n";
    code += "        ret[cnt] = num\n";
    code += "        num += 1\n";
    code += "        cnt += 1\n";
    code += "    return ret\n";
    parser(code);
    code = "";
    code += "def map(f, arr):\n";
    code += "    i = 0\n";
    code += "    while i < arr.length:\n";
    code += "        arr[i] = f(arr[i])\n";
    code += "        i += 1\n";
    code += "    return arr\n";
    parser(code);
    code = "";
    code += "def reduce(f, arr):\n";
    code += "    i = 1\n";
    code += "    ret = arr[0]\n";
    code += "    while i < arr.length:\n";
    code += "        ret = f(ret, arr[i])\n";
    code += "        i += 1\n";
    code += "    return ret\n";
    parser(code);
}